/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5db9c2cbc6ce4c4de2ba3317
*
* You will get 10% discount for each one of your friends
* 
*/
// Import Libraries
import { Component, OnInit } from '@angular/core';
import { Location } from '@angular/common';
import { ActivatedRoute } from '@angular/router';
// Import Services
import { TasksService } from '../../services/tasks.service';
import { DocumentsService } from '../../services/documents.service';
// Import Models
import { Tasks } from '../../domain/easy-recruit_db/tasks';
import { Documents } from '../../domain/easy-recruit_db/documents';

// START - USED SERVICES
/**
* TasksService.create
*	@description CRUD ACTION create
*
* DocumentsService.findByTaskId
*	@description CRUD ACTION findByTaskId
*	@param Objectid key Id della risorsa TaskId da cercare
*
* TasksService.get
*	@description CRUD ACTION get
*	@param ObjectId id Id resource
*
* TasksService.update
*	@description CRUD ACTION update
*	@param ObjectId id Id
*
*/
// END - USED SERVICES

/**
 * This component allows to edit a Tasks
 */
@Component({
    selector: 'app-tasks-edit',
    templateUrl: 'tasks-edit.component.html',
    styleUrls: ['tasks-edit.component.css']
})
export class TasksEditComponent implements OnInit {
    item: Tasks;
    listTaskId: Tasks[];
    externalDocuments: Documents[];
    model: Tasks;
    formValid: Boolean;

    constructor(
    private tasksService: TasksService,
    private documentsService: DocumentsService,
    private route: ActivatedRoute,
    private location: Location) {
        // Init item
        this.item = new Tasks();
        this.externalDocuments = [];
    }

    /**
     * Init
     */
    ngOnInit() {
        this.route.params.subscribe(param => {
            const id: string = param['id'];
            if (id !== 'new') {
                this.tasksService.get(id).subscribe(item => this.item = item);
                this.documentsService.findByTaskId(id).subscribe(list => this.externalDocuments = list);
            }
            // Get relations
        });
    }


    /**
     * Save Tasks
     *
     * @param {boolean} formValid Form validity check
     * @param Tasks item Tasks to save
     */
    save(formValid: boolean, item: Tasks): void {
        this.formValid = formValid;
        if (formValid) {
            if (item._id) {
                this.tasksService.update(item).subscribe(data => this.goBack());
            } else {
                this.tasksService.create(item).subscribe(data => this.goBack());
            } 
        }
    }

    /**
     * Go Back
     */
    goBack(): void {
        this.location.back();
    }


}



